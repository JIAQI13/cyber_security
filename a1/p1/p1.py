import os, itertools, string, matplotlib.pyplot as plt

lookup_tbl = [[0x8, 0x9, 0xb, 0xa, 0xe, 0xf, 0xd, 0xc, 0x4, 0x5, 0x7, 0x6, 0x2, 0x3, 0x1, 0x0],
              [0x9, 0xb, 0xa, 0xe, 0xf, 0xd, 0xc, 0x4, 0x5, 0x7, 0x6, 0x2, 0x3, 0x1, 0x0, 0x8],
              [0x1, 0x0, 0x8, 0x9, 0xb, 0xa, 0xe, 0xf, 0xd, 0xc, 0x4, 0x5, 0x7, 0x6, 0x2, 0x3],
              [0xa, 0xe, 0xf, 0xd, 0xc, 0x4, 0x5, 0x7, 0x6, 0x2, 0x3, 0x1, 0x0, 0x8, 0x9, 0xb],
              [0xe, 0xf, 0xd, 0xc, 0x4, 0x5, 0x7, 0x6, 0x2, 0x3, 0x1, 0x0, 0x8, 0x9, 0xb, 0xa],
              [0x7, 0x6, 0x2, 0x3, 0x1, 0x0, 0x8, 0x9, 0xb, 0xa, 0xe, 0xf, 0xd, 0xc, 0x4, 0x5],
              [0xd, 0xc, 0x4, 0x5, 0x7, 0x6, 0x2, 0x3, 0x1, 0x0, 0x8, 0x9, 0xb, 0xa, 0xe, 0xf],
              [0xc, 0x4, 0x5, 0x7, 0x6, 0x2, 0x3, 0x1, 0x0, 0x8, 0x9, 0xb, 0xa, 0xe, 0xf, 0xd],
              [0x4, 0x5, 0x7, 0x6, 0x2, 0x3, 0x1, 0x0, 0x8, 0x9, 0xb, 0xa, 0xe, 0xf, 0xd, 0xc],
              [0x5, 0x7, 0x6, 0x2, 0x3, 0x1, 0x0, 0x8, 0x9, 0xb, 0xa, 0xe, 0xf, 0xd, 0xc, 0x4],
              [0xf, 0xd, 0xc, 0x4, 0x5, 0x7, 0x6, 0x2, 0x3, 0x1, 0x0, 0x8, 0x9, 0xb, 0xa, 0xe],
              [0x6, 0x2, 0x3, 0x1, 0x0, 0x8, 0x9, 0xb, 0xa, 0xe, 0xf, 0xd, 0xc, 0x4, 0x5, 0x7],
              [0x2, 0x3, 0x1, 0x0, 0x8, 0x9, 0xb, 0xa, 0xe, 0xf, 0xd, 0xc, 0x4, 0x5, 0x7, 0x6],
              [0x3, 0x1, 0x0, 0x8, 0x9, 0xb, 0xa, 0xe, 0xf, 0xd, 0xc, 0x4, 0x5, 0x7, 0x6, 0x2],
              [0xb, 0xa, 0xe, 0xf, 0xd, 0xc, 0x4, 0x5, 0x7, 0x6, 0x2, 0x3, 0x1, 0x0, 0x8, 0x9],
              [0x0, 0x8, 0x9, 0xb, 0xa, 0xe, 0xf, 0xd, 0xc, 0x4, 0x5, 0x7, 0x6, 0x2, 0x3, 0x1]]

input_file = open('../../../assignment1_nonsliding/ciphertext1', 'rb')
byte = input_file.read(1)

sequence = []
hex_sequence = []

#### Preparing data ####

while byte != b"":
    hex_code = byte.hex()
    cl = hex_code[-1]
    ch = hex_code[-2] if hex_code[-2] != 'x' else '0'

    ph_kl = []
    pl_kh = []
    possible_p_k = {}
    for row in range(len(lookup_tbl)):
        for cell in range(len(lookup_tbl[row])):

            if lookup_tbl[row][cell] == int(ch, 16):
                ph_kl.append((hex(row).replace('0x', ''), hex(cell).replace('0x', '')))

            if lookup_tbl[row][cell] == int(cl, 16):
                pl_kh.append((hex(row).replace('0x', ''), hex(cell).replace('0x', '')))

    for ph, kl in ph_kl:
        for pl, kh in pl_kh:
            p_ascii = int(ph + pl, 16)
            # if p_ascii < 32 or p_ascii >= 127: continue
            k_ascii = int(kh + kl, 16)
            if k_ascii < 32 or k_ascii >= 127: continue
            possible_p_k[chr(k_ascii)] = p_ascii

    sequence.append(possible_p_k)
    hex_sequence.append(hex_code)

    byte = input_file.read(1)

#### Determine length ####

for step in range(1, 50):
    match = total = 0
    for i in range(len(sequence)):
        for j in range(i + step, len(sequence), step):
            total += 1
            if hex_sequence[i] == hex_sequence[j]: match += 1

    ioc = float(match) / float(total)
    print("%3d%7.2f%% %s" % (step, 100*ioc, "#" * int(0.5 + 500*ioc)))

#### Decipher to plaintext with given key ####

def decipher(key):
    fn = 'p1.out'
    while len(key) < len(sequence):
        key += key

    with open(fn, 'wb') as out_file:
        for i in range(len(sequence)):
            out_file.write(bytes([sequence[i][key[i]]]))
    try:os.startfile(fn)
    except: pass

#### Manual ####

def get_freq(position, character, length):
    freq = {c: 0 for c in string.ascii_lowercase}
    for i in range(position, len(sequence), length):
        try:
            freq[chr(sequence[i][character]).lower()] += 1
        except:
            freq[chr(sequence[i][character]).lower()] = 1

    plt.bar(sorted(list(freq.keys())), list(freq[c] for c in sorted(list(freq.keys()))), color='g')
    plt.title(str(position) + character)
    plt.show()

while True:
    pos = int(input('> '))
    if pos == '-1': break
    for char in range(32, 127):
        get_freq(pos, chr(char), 8)

#### Automated ####

# def get_freq(position, character, length):
#     freq = {c: 0 for c in string.ascii_lowercase}
#     for i in range(position, len(sequence), length):
#         try:
#             freq[chr(sequence[i][character]).lower()] += 1
#         except:
#             freq[chr(sequence[i][character]).lower()] = 1
#     if all( 32 <= ord(i) < 127 or ord(i) == 10 for i in freq.keys()): return character
#     return False
#
# key = ''
# for pos in range(8):
#     for char in range(32, 127):
#         res = get_freq(pos, chr(char), 8)
#         key += res
# print(key)

#### Result ####
decipher('_LitFuT_')